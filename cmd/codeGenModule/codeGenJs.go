package codeGenModule

import (
	"fmt"
	"strings"
)

func generateJSClass(blockName string, component Integration, kind string) string {
	var sb strings.Builder

	sb.WriteString(fmt.Sprintf("// PLEASE DO NOT EDIT THIS FILE, THIS IS GENERATED BY NATIVEBLOCKS \n"))
	sb.WriteString(fmt.Sprintf("class %s {\n", blockName))

	sb.WriteString("  keyType;\n")
	sb.WriteString("  integrationVersion;\n")
	sb.WriteString("  properties;\n")
	sb.WriteString("  data;\n")
	sb.WriteString("  events;\n")

	if kind == "BLOCK" {
		sb.WriteString("  actions;\n")
		sb.WriteString("  blocks;\n")
		sb.WriteString("  slots;\n")
		sb.WriteString("  visibilityKey;\n")
		sb.WriteString("  slot;\n")
		sb.WriteString("  key;\n")
	} else {
		sb.WriteString("  triggers;\n")
		sb.WriteString("  name;\n")
		sb.WriteString("  then;\n")
	}
	sb.WriteString("\n")

	sb.WriteString("  constructor(config = {}) {\n")
	sb.WriteString(fmt.Sprintf("    this.keyType = \"%s\";\n", component.KeyType))

	if kind == "BLOCK" {
		sb.WriteString("    this.key = config.key;\n")
		sb.WriteString("    this.visibilityKey = config.visibilityKey;\n")
		sb.WriteString("    this.slot = config.slot;\n")
		sb.WriteString("    this.actions = [];\n")
		sb.WriteString("    this.blocks = [];\n")
		sb.WriteString("    this.slots = [];\n")
	} else {
		sb.WriteString("    this.triggers = [];\n")
		sb.WriteString("    this.name = config.name;\n")
		sb.WriteString("    this.then = config.then;\n")
	}

	sb.WriteString(fmt.Sprintf("    this.integrationVersion = %v;\n", component.Version))
	sb.WriteString("    this.properties = [];\n")
	sb.WriteString("    this.data = [];\n")
	sb.WriteString("    this.events = [];\n")

	sb.WriteString("    const initialProperties = [\n")
	for _, prop := range component.Properties {
		if kind == "BLOCK" {
			sb.WriteString(fmt.Sprintf("      { key: \"%s\", valueMobile: \"%s\", valueTablet: \"%s\", valueDesktop: \"%s\", type: \"%s\" },\n",
				prop.Key,
				prop.Value,
				prop.Value,
				prop.Value,
				prop.Type))
		} else {
			sb.WriteString(fmt.Sprintf("      { key: \"%s\", value: \"%s\", type: \"%s\" },\n",
				prop.Key,
				prop.Value,
				prop.Type))
		}
	}
	sb.WriteString("    ];\n")
	sb.WriteString("    this.properties.push(...initialProperties);\n")

	sb.WriteString("    const initialData = [\n")
	for _, data := range component.Data {
		sb.WriteString(fmt.Sprintf("      { key: \"%s\", value: null, type: \"%s\" },\n", data.Key, data.Type))
	}
	sb.WriteString("    ];\n")
	sb.WriteString("    this.data.push(...initialData);\n")

	if kind == "BLOCK" {
		sb.WriteString("    const initialSlots = [\n")
		for _, slot := range component.Slots {
			sb.WriteString(fmt.Sprintf("      { slot: \"%s\" },\n", slot.Slot))
		}
		sb.WriteString("    ];\n")
		sb.WriteString("    this.slots.push(...initialSlots);\n")
		sb.WriteString("    const initialEvents = [\n")
		for _, event := range component.Events {
			sb.WriteString(fmt.Sprintf("      { event: \"%s\" },\n", event.Event))
		}
		sb.WriteString("    ];\n")
		sb.WriteString("    this.events.push(...initialEvents);\n")
	} else {
		sb.WriteString("    const initialEvents = [\n")
		if len(component.Events) == 0 {
			sb.WriteString(fmt.Sprintf("      { event: \"%s\" },\n", "END"))
			sb.WriteString("    ];\n")
		} else {
			for _, event := range component.Events {
				sb.WriteString(fmt.Sprintf("      { event: \"%s\" },\n", event.Event))
			}
			sb.WriteString("    ];\n")
		}
		sb.WriteString("    this.events.push(...initialEvents);\n")
	}

	sb.WriteString("  }\n\n")

	sb.WriteString("  isValidEvent(eventName) {\n")
	sb.WriteString("    return this.events.some(e => e.event === eventName);\n")
	sb.WriteString("  }\n\n")

	if kind == "BLOCK" {
		sb.WriteString("  isValidBlock(block) {\n")
		sb.WriteString("    return block && \n")
		sb.WriteString("           typeof block === \"object\" && \n")
		sb.WriteString("           block.key && \n")
		sb.WriteString("           block.keyType;\n")
		sb.WriteString("  }\n\n")

		sb.WriteString("  addAction(event, triggers) {\n")
		sb.WriteString("    if (!this.isValidEvent(event)) {\n")
		sb.WriteString("      throw new Error(`Invalid event: ${event}. Must be one of: ${this.events.map(e => e.event).join(\", \")}`);\n")
		sb.WriteString("    }\n")
		sb.WriteString("    const action = { event, triggers: triggers };\n")
		sb.WriteString("    this.actions.push(action);\n")
		sb.WriteString("    return this;\n")
		sb.WriteString("  }\n\n")

		sb.WriteString("  getAction(event) {\n")
		sb.WriteString("    return this.actions.find(a => a.event === event);\n")
		sb.WriteString("  }\n\n")

		sb.WriteString("  addBlock(block) {\n")
		sb.WriteString("    if (!this.isValidBlock(block)) {\n")
		sb.WriteString("      throw new Error(\"Invalid block: Block must be an object with at least key and keyType\");\n")
		sb.WriteString("    }\n")
		sb.WriteString("    this.blocks.push(block);\n")
		sb.WriteString("    return this;\n")
		sb.WriteString("  }\n\n")

		sb.WriteString("  getBlock(key) {\n")
		sb.WriteString("    return this.blocks.find(b => b.key === key);\n")
		sb.WriteString("  }\n\n")

		sb.WriteString("  getBlocks() {\n")
		sb.WriteString("    return [...this.blocks];\n")
		sb.WriteString("  }\n\n")
	} else {
		sb.WriteString("  isValidTrigger(trigger) {\n")
		sb.WriteString("    return trigger && \n")
		sb.WriteString("           typeof trigger === \"object\" && \n")
		sb.WriteString("           trigger.name && \n")
		sb.WriteString("           trigger.keyType && \n")
		sb.WriteString("           trigger.then;\n")
		sb.WriteString("  }\n\n")
		sb.WriteString("  addTrigger(trigger) {\n")
		sb.WriteString("    if (!this.isValidEvent(trigger.then)) {\n")
		sb.WriteString("      throw new Error(`Invalid then: ${trigger.then}. Must be one of: ${this.events.map(e => e.event).join(\", \")}`);\n")
		sb.WriteString("    }\n")
		sb.WriteString("    if (!this.isValidTrigger(trigger)) {\n")
		sb.WriteString("      throw new Error(\"Invalid trigger: Trigger must be an object with name, keyType, and then\");\n")
		sb.WriteString("    }\n")
		sb.WriteString("    this.triggers.push({\n")
		sb.WriteString("      name: trigger.name,\n")
		sb.WriteString("      keyType: trigger.keyType,\n")
		sb.WriteString("      then: trigger.then,\n")
		sb.WriteString("      properties: trigger.properties || [],\n")
		sb.WriteString("      data: trigger.data || [],\n")
		sb.WriteString("      triggers: trigger.triggers || []\n")
		sb.WriteString("    });\n")
		sb.WriteString("    return this;\n")
		sb.WriteString("  }\n\n")

	}

	if kind == "BLOCK" {
		sb.WriteString("  modifyProperty(key, valueMobile, valueTablet, valueDesktop) {\n")
		sb.WriteString("    const propIndex = this.properties.findIndex(p => p.key === key);\n")
		sb.WriteString("    if (propIndex !== -1) {\n")
		sb.WriteString("      this.properties[propIndex] = { ...this.properties[propIndex], valueMobile, valueTablet, valueDesktop };\n")
		sb.WriteString("    }\n")
		sb.WriteString("    return this;\n")
		sb.WriteString("  }\n\n")
	} else {
		sb.WriteString("  modifyProperty(key, value) {\n")
		sb.WriteString("    const propIndex = this.properties.findIndex(p => p.key === key);\n")
		sb.WriteString("    if (propIndex !== -1) {\n")
		sb.WriteString("      this.properties[propIndex] = { ...this.properties[propIndex], value };\n")
		sb.WriteString("    }\n")
		sb.WriteString("    return this;\n")
		sb.WriteString("  }\n\n")
	}

	sb.WriteString("  assignData(key, value) {\n")
	sb.WriteString("    const dataIndex = this.data.findIndex(d => d.key === key);\n")
	sb.WriteString("    if (dataIndex !== -1) {\n")
	sb.WriteString("      this.data[dataIndex] = { ...this.data[dataIndex], value };\n")
	sb.WriteString("    }\n")
	sb.WriteString("    return this;\n")
	sb.WriteString("  }\n\n")

	sb.WriteString("  build() {\n")
	sb.WriteString("    return {\n")
	sb.WriteString("      keyType: this.keyType,\n")
	if kind == "BLOCK" {
		sb.WriteString("      key: this.key,\n")
		sb.WriteString("      visibilityKey: this.visibilityKey,\n")
		sb.WriteString("      slot: this.slot,\n")
		sb.WriteString("      slots: this.slots,\n")
		sb.WriteString("      actions: this.actions,\n")
		sb.WriteString("      blocks: this.blocks,\n")
	} else {
		sb.WriteString("      name: this.name,\n")
		sb.WriteString("      then: this.then,\n")
		sb.WriteString("      triggers: this.triggers,\n")
	}
	sb.WriteString("      data: this.data,\n")
	sb.WriteString("      properties: this.properties,\n")
	sb.WriteString("      integrationVersion: this.integrationVersion,\n")
	sb.WriteString("    };\n")
	sb.WriteString("  }\n")

	sb.WriteString("}\n\n")

	sb.WriteString(fmt.Sprintf("module.exports = %s;\n", blockName))

	return sb.String()
}

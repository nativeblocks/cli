package codeGenModule

import (
	"fmt"
	"strings"
)

func generatePHPClass(blockName string, component Integration, kind string) string {
	var sb strings.Builder

	sb.WriteString("<?php\n\n")
	sb.WriteString("// PLEASE DO NOT EDIT THIS FILE, THIS IS GENERATED BY NATIVEBLOCKS\n\n")

	sb.WriteString(fmt.Sprintf("namespace App\\Integrations; \n\n"))
	sb.WriteString(fmt.Sprintf("class %s\n{\n", blockName))

	sb.WriteString("    private string $keyType;\n")
	sb.WriteString("    private int $integrationVersion;\n")
	sb.WriteString("    private array $properties = [];\n")
	sb.WriteString("    private array $data = [];\n")
	sb.WriteString("    private array $events = [];\n")

	if kind == "BLOCK" {
		sb.WriteString("    private array $actions = [];\n")
		sb.WriteString("    private array $blocks = [];\n")
		sb.WriteString("    private array $slots = [];\n")
		sb.WriteString("    private string $visibilityKey;\n")
		sb.WriteString("    private string $slot;\n")
		sb.WriteString("    private string $key;\n")
	} else {
		sb.WriteString("    private array $triggers = [];\n")
		sb.WriteString("    private string $name;\n")
		sb.WriteString("    private string $then;\n")
	}

	sb.WriteString("\n    public function __construct(array $config = [])\n    {\n")
	sb.WriteString(fmt.Sprintf("        $this->keyType = '%s';\n", component.KeyType))
	sb.WriteString(fmt.Sprintf("        $this->integrationVersion = %v;\n", component.Version))

	if kind == "BLOCK" {
		sb.WriteString("        $this->key = $config['key'] ?? '';\n")
		sb.WriteString("        $this->visibilityKey = $config['visibilityKey'] ?? '';\n")
		sb.WriteString("        $this->slot = $config['slot'] ?? '';\n")
		sb.WriteString("        $this->actions = [];\n")
		sb.WriteString("        $this->blocks = [];\n")
	} else {
		sb.WriteString("        $this->name = $config['name'] ?? '';\n")
		sb.WriteString("        $this->then = $config['then'] ?? '';\n")
		sb.WriteString("        $this->triggers = [];\n")
	}

	sb.WriteString("        $initialProperties = [\n")
	for _, prop := range component.Properties {
		if kind == "BLOCK" {
			sb.WriteString(fmt.Sprintf("            ['key' => '%s', 'valueMobile' => '%s', 'valueTablet' => '%s', 'valueDesktop' => '%s', 'type' => '%s'],\n",
				prop.Key, prop.Value, prop.Value, prop.Value, prop.Type))
		} else {
			sb.WriteString(fmt.Sprintf("            ['key' => '%s', 'value' => '%s', 'type' => '%s'],\n",
				prop.Key, prop.Value, prop.Type))
		}
	}
	sb.WriteString("        ];\n")
	sb.WriteString("        $this->properties = $initialProperties;\n\n")

	sb.WriteString("        $initialData = [\n")
	for _, data := range component.Data {
		sb.WriteString(fmt.Sprintf("            ['key' => '%s', 'value' => null, 'type' => '%s'],\n",
			data.Key, data.Type))
	}
	sb.WriteString("        ];\n")
	sb.WriteString("        $this->data = $initialData;\n\n")

	if kind == "BLOCK" {
		sb.WriteString("        $initialSlots = [\n")
		for _, slot := range component.Slots {
			sb.WriteString(fmt.Sprintf("            ['slot' => '%s'],\n", slot.Slot))
		}
		sb.WriteString("        ];\n")
		sb.WriteString("        $this->slots = $initialSlots;\n\n")
	}

	sb.WriteString("        $initialEvents = [\n")
	if kind != "BLOCK" && len(component.Events) == 0 {
		sb.WriteString("            ['event' => 'END'],\n")
	} else {
		for _, event := range component.Events {
			sb.WriteString(fmt.Sprintf("            ['event' => '%s'],\n", event.Event))
		}
	}
	sb.WriteString("        ];\n")
	sb.WriteString("        $this->events = $initialEvents;\n")
	sb.WriteString("    }\n\n")

	sb.WriteString("    private function isValidEvent(string $eventName): bool\n    {\n")
	sb.WriteString("        foreach ($this->events as $event) {\n")
	sb.WriteString("            if ($event['event'] === $eventName) {\n")
	sb.WriteString("                return true;\n")
	sb.WriteString("            }\n")
	sb.WriteString("        }\n")
	sb.WriteString("        return false;\n")
	sb.WriteString("    }\n\n")

	if kind == "BLOCK" {
		sb.WriteString("    private function isValidBlock(array $block): bool\n    {\n")
		sb.WriteString("        return isset($block['key']) && isset($block['keyType']);\n")
		sb.WriteString("    }\n\n")

		if len(component.Events) > 0 {
			sb.WriteString("    public function addAction(string $event, array $triggers): self\n    {\n")
			sb.WriteString("        if (!$this->isValidEvent($event)) {\n")
			sb.WriteString("            throw new \\Exception(sprintf('Invalid event: %s', $event));\n")
			sb.WriteString("        }\n")
			sb.WriteString("        array_push($this->actions, ['event' => $event, 'triggers' => $triggers]);\n")
			sb.WriteString("        return $this;\n")
			sb.WriteString("    }\n\n")
		}

		if len(component.Slots) > 0 {
			sb.WriteString("    public function addBlock(array $block): self\n    {\n")
			sb.WriteString("        if (!$this->isValidBlock($block)) {\n")
			sb.WriteString("            throw new \\Exception('Invalid block: Block must be an array with at least key and keyType');\n")
			sb.WriteString("        }\n")
			sb.WriteString("        array_push($this->blocks, $block);\n")
			sb.WriteString("        return $this;\n")
			sb.WriteString("    }\n\n")
		}
	} else {
		sb.WriteString("    private function isValidTrigger(array $trigger): bool\n    {\n")
		sb.WriteString("        return isset($trigger['name']) && isset($trigger['keyType']) && isset($trigger['then']);\n")
		sb.WriteString("    }\n\n")

		sb.WriteString("    public function addTrigger(array $trigger): self\n    {\n")
		sb.WriteString("        if (!$this->isValidEvent($trigger['then'])) {\n")
		sb.WriteString("            throw new \\Exception(sprintf('Invalid then: %s', $trigger['then']));\n")
		sb.WriteString("        }\n")
		sb.WriteString("        if (!$this->isValidTrigger($trigger)) {\n")
		sb.WriteString("            throw new \\Exception('Invalid trigger: Trigger must be an array with name, keyType, and then');\n")
		sb.WriteString("        }\n")

		sb.WriteString("        array_push($this->triggers, [\n")
		sb.WriteString("            'name' => $trigger['name'],\n")
		sb.WriteString("            'keyType' => $trigger['keyType'],\n")
		sb.WriteString("            'then' => $trigger['then'],\n")
		sb.WriteString("            'properties' => $trigger['properties'] ?? [],\n")
		sb.WriteString("            'data' => $trigger['data'] ?? [],\n")
		sb.WriteString("            'triggers' => $trigger['triggers'] ?? []\n")
		sb.WriteString("        ]);\n")
		sb.WriteString("        return $this;\n")
		sb.WriteString("    }\n\n")
	}

	if len(component.Properties) > 0 {
		if kind == "BLOCK" {
			sb.WriteString("    public function modifyProperty(string $key, string $valueMobile, string $valueTablet, string $valueDesktop): self\n    {\n")
			sb.WriteString("        foreach ($this->properties as &$property) {\n")
			sb.WriteString("            if ($property['key'] === $key) {\n")
			sb.WriteString("                $property['valueMobile'] = $valueMobile;\n")
			sb.WriteString("                $property['valueTablet'] = $valueTablet;\n")
			sb.WriteString("                $property['valueDesktop'] = $valueDesktop;\n")
			sb.WriteString("                break;\n")
			sb.WriteString("            }\n")
			sb.WriteString("        }\n")
			sb.WriteString("        return $this;\n")
			sb.WriteString("    }\n\n")
		} else {
			sb.WriteString("    public function modifyProperty(string $key, string $value): self\n    {\n")
			sb.WriteString("        foreach ($this->properties as &$property) {\n")
			sb.WriteString("            if ($property['key'] === $key) {\n")
			sb.WriteString("                $property['value'] = $value;\n")
			sb.WriteString("                break;\n")
			sb.WriteString("            }\n")
			sb.WriteString("        }\n")
			sb.WriteString("        return $this;\n")
			sb.WriteString("    }\n\n")
		}
	}

	if len(component.Data) > 0 {
		sb.WriteString("    public function assignData(string $key, $value): self\n    {\n")
		sb.WriteString("        foreach ($this->data as &$data) {\n")
		sb.WriteString("            if ($data['key'] === $key) {\n")
		sb.WriteString("                $data['value'] = $value;\n")
		sb.WriteString("                break;\n")
		sb.WriteString("            }\n")
		sb.WriteString("        }\n")
		sb.WriteString("        return $this;\n")
		sb.WriteString("    }\n\n")
	}

	sb.WriteString("    public function build(): array\n    {\n")
	sb.WriteString("        return [\n")
	sb.WriteString("            'keyType' => $this->keyType,\n")
	if kind == "BLOCK" {
		sb.WriteString("            'key' => $this->key,\n")
		sb.WriteString("            'visibilityKey' => $this->visibilityKey,\n")
		sb.WriteString("            'slot' => $this->slot,\n")
		sb.WriteString("            'slots' => $this->slots,\n")
		sb.WriteString("            'actions' => $this->actions,\n")
		sb.WriteString("            'blocks' => $this->blocks,\n")
	} else {
		sb.WriteString("            'name' => $this->name,\n")
		sb.WriteString("            'then' => $this->then,\n")
		sb.WriteString("            'triggers' => $this->triggers,\n")
	}
	sb.WriteString("            'data' => $this->data,\n")
	sb.WriteString("            'properties' => $this->properties,\n")
	sb.WriteString("            'integrationVersion' => $this->integrationVersion,\n")
	sb.WriteString("        ];\n")
	sb.WriteString("    }\n")

	sb.WriteString("}\n")

	return sb.String()
}
